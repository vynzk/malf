
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL ENTER ID NUM OPERATOR SEMICOLON do else endif if parentesis_der parentesis_izq read then wend while write\n    statement_list : statement_list statement\n                   | statement\n    \n    statement : read_statement\n              | if_statement\n              | while_statement\n              | write_statement\n    read_statement : read ID SEMICOLON\n    if_statement : if parentesis_izq condition parentesis_der then ENTER statement_list ENTER endif SEMICOLON\n                | if condition then ENTER statement_list ENTER else_statement ENTER endif SEMICOLON\n    \n    else_statement : else ENTER statement_list\n            | \n    condition : BOOLwhile_statement : while condition do ENTER statement_list ENTER wend SEMICOLONwrite_statement : write expression SEMICOLON\n    expression : ID\n               | NUM\n               | expression OPERATOR expression\n    '
    
_lr_action_items = {'read':([0,1,2,3,4,5,6,11,20,24,27,28,31,32,33,36,42,43,46,47,48,],[7,7,-2,-3,-4,-5,-6,-1,-7,-14,7,7,7,7,7,7,7,-13,7,-8,-9,]),'if':([0,1,2,3,4,5,6,11,20,24,27,28,31,32,33,36,42,43,46,47,48,],[8,8,-2,-3,-4,-5,-6,-1,-7,-14,8,8,8,8,8,8,8,-13,8,-8,-9,]),'while':([0,1,2,3,4,5,6,11,20,24,27,28,31,32,33,36,42,43,46,47,48,],[9,9,-2,-3,-4,-5,-6,-1,-7,-14,9,9,9,9,9,9,9,-13,9,-8,-9,]),'write':([0,1,2,3,4,5,6,11,20,24,27,28,31,32,33,36,42,43,46,47,48,],[10,10,-2,-3,-4,-5,-6,-1,-7,-14,10,10,10,10,10,10,10,-13,10,-8,-9,]),'$end':([1,2,3,4,5,6,11,20,24,43,47,48,],[0,-2,-3,-4,-5,-6,-1,-7,-14,-13,-8,-9,]),'ENTER':([2,3,4,5,6,11,20,22,23,24,30,31,32,34,36,37,38,43,46,47,48,],[-2,-3,-4,-5,-6,-1,-7,27,28,-14,33,34,35,-11,40,41,42,-13,-10,-8,-9,]),'ID':([7,10,25,],[12,18,18,]),'parentesis_izq':([8,],[13,]),'BOOL':([8,9,13,],[15,15,15,]),'NUM':([10,25,],[19,19,]),'SEMICOLON':([12,17,18,19,29,39,44,45,],[20,24,-15,-16,-17,43,47,48,]),'then':([14,15,26,],[22,-12,30,]),'do':([15,16,],[-12,23,]),'parentesis_der':([15,21,],[-12,26,]),'OPERATOR':([17,18,19,29,],[25,-15,-16,25,]),'else':([34,],[38,]),'wend':([35,],[39,]),'endif':([40,41,],[44,45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,27,28,33,42,],[1,31,32,36,46,]),'statement':([0,1,27,28,31,32,33,36,42,46,],[2,11,2,2,11,11,2,11,2,11,]),'read_statement':([0,1,27,28,31,32,33,36,42,46,],[3,3,3,3,3,3,3,3,3,3,]),'if_statement':([0,1,27,28,31,32,33,36,42,46,],[4,4,4,4,4,4,4,4,4,4,]),'while_statement':([0,1,27,28,31,32,33,36,42,46,],[5,5,5,5,5,5,5,5,5,5,]),'write_statement':([0,1,27,28,31,32,33,36,42,46,],[6,6,6,6,6,6,6,6,6,6,]),'condition':([8,9,13,],[14,16,21,]),'expression':([10,25,],[17,29,]),'else_statement':([34,],[37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','malf.py',68),
  ('statement_list -> statement','statement_list',1,'p_statement_list','malf.py',69),
  ('statement -> read_statement','statement',1,'p_statement','malf.py',75),
  ('statement -> if_statement','statement',1,'p_statement','malf.py',76),
  ('statement -> while_statement','statement',1,'p_statement','malf.py',77),
  ('statement -> write_statement','statement',1,'p_statement','malf.py',78),
  ('read_statement -> read ID SEMICOLON','read_statement',3,'p_read_statement','malf.py',83),
  ('if_statement -> if parentesis_izq condition parentesis_der then ENTER statement_list ENTER endif SEMICOLON','if_statement',10,'p_if_statement','malf.py',88),
  ('if_statement -> if condition then ENTER statement_list ENTER else_statement ENTER endif SEMICOLON','if_statement',10,'p_if_statement','malf.py',89),
  ('else_statement -> else ENTER statement_list','else_statement',3,'p_else_statement','malf.py',95),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','malf.py',96),
  ('condition -> BOOL','condition',1,'p_condition','malf.py',100),
  ('while_statement -> while condition do ENTER statement_list ENTER wend SEMICOLON','while_statement',8,'p_while_statement','malf.py',104),
  ('write_statement -> write expression SEMICOLON','write_statement',3,'p_write_statement','malf.py',108),
  ('expression -> ID','expression',1,'p_expression','malf.py',113),
  ('expression -> NUM','expression',1,'p_expression','malf.py',114),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression','malf.py',115),
]
